The purpose of this file is to store pseudocode versions
of the solutions of the problems that I have solved in order
to review them more quickly. Simply given the question name 
and description I should be able to come up with the pseudocode 
from memory which can then be translated into working code. 

==============================================
1. TWO SUM 
==============================================
Given an array of integers nums and an integer 
target, return indices of the two numbers such 
that they add up to target.You may assume that 
each input would have exactly one solution, 
and you may not use the same element twice.
You can return the answer in any order.
 ---------------------------------------------
Pseudocode:


initialize dict 
loop through nums
    if target - nums[i] in dict
       return indices
    else:
       add to dict


"Tricks" to Remember: one pass and lookups are O(1)
Concepts: array, hash table

==============================================
49. Group Anagrams
==============================================
Given an array of strings strs, group the 
anagrams together. You can return the answer 
in any order.
An Anagram is a word or phrase formed by 
rearranging the letters of a different word 
or phrase, typically using all the original 
letters exactly once.
 ---------------------------------------------
Pseudocode:

initialize answer list
initialize dictionary for anagrams

loop through all words in argument
    if sorted current word not in dict
        add the sorted key and [word]
    else:
        append under that sorted key 

loop through all values of dict
    append to answer

return answer 


"Tricks" to Remember: Keys in python cannot be 
mutable, i.e. lists. Must convert to tuple first
**retrieving keys/values from dict 
Concepts: array, hash table, string, sorting

==============================================
217. Contains Duplicate
==============================================
Given an integer array nums, return true if 
any value appears at least twice in the array, 
and return false if every element is distinct.

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
 ---------------------------------------------
 Pseudocode:

 initialize hashmap of seen nums 

 loop through all nums 
    if num in seen
        return True
    else:
        add number to seen 
return False

"Tricks" to Remember: can exit with true to 
duplicate at any point looping through the 
nums when that number is 
already in the hashmap 
Concepts: array, hash table, sorting 

==============================================
219. Contains Duplicate II
==============================================
Given an integer array nums and an integer k, 
return true if there are two distinct indices 
i and j in the array such that nums[i] == 
nums[j] and abs(i - j) <= k.
Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true
Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false
 ---------------------------------------------
 Pseudocode:

initialize hashmap

loop through all numbers
    if number not in hashmap 
        add to hashmap num: index 
    else:
        if the abs diff between index and hm index <=K
            return True
        add to hashmap num: index
return False

"Tricks" to Remember: Don't have to store list of 
indices
for each number, because the difference will 
always be >k as you go to the right. Only need
to compare one previous to current 
Concepts: array, hash table, sliding window

==============================================
347. Top K Frequent Elements
==============================================
Given an integer array nums and an integer k, 
return the k most frequent elements. You may 
return the answer in any order.
 ---------------------------------------------
 Pseudocode:

 initialize dict of count
 initialize array of arrays of length nums 

for num in nums 
    set count dict value 

for num, count in count.items 
    add num to frequency array 

initialize result
for i in length of frequency, iterate backwards
    for n in frequency 
        append to result
        if result == K
            return result

"Tricks" to Remember: Bucket sort using count as index
and arrays with the number as values. Max size of bucket sort
array is the length of the array - O(n)
Concepts:array, hash table, divide and conquer, 
sorting, heap (priority queue), bucket sort, counting, 
quickselect

==============================================
523. CONTINUOUS SUBARRAY SUM 
==============================================
Given an integer array nums and an integer k, 
return true if nums has a good subarray or 
false otherwise. A good subarray is a subarray 
where: its length is at least two, and the sum 
of the elements of the subarray is a multiple 
of k.
Note that:
A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists 
an integer n such that x = n * k. 0 is always 
a multiple of k.
 ---------------------------------------------
Pseudocode:

initialize dict 
initialize total

loop through with index and number 
    increment total 
    calculate remainder
    if calculated remainder not already in dict 
        add remainder to dict [r: index]

    else if index at least 2 (and already in dict)
        return True
    
return False 



"Tricks" to Remember: initialize hash table with 
0: -1
to handle cases where subarray starting from index 
0 is divisible by
 k
WHY does it matter/what does it mean if there is 
repeat of the same remainder?
Remainder is what is left after not dividing evenly 
into a number. 
So if you get the same remainder after adding 
more numbers to the subarray, a portion of the 
subarray has been divided
evenly into the number (k)
k = 6
[23, 2, 4] -> [23, 25, 29] 23 % 6 = 5 and 29 % 6 = 5
(2+4 = 6 which divides into 6 evenly)

Concepts: array, hash table, math, prefix sum

==============================================
1051. Height Checker
==============================================
A school is trying to take an annual photo of 
all the students. The students are asked to 
stand in a single file line in non-decreasing 
order by height. Let this ordering be 
represented by the integer array expected 
where expected[i] is the expected height of 
the ith student in line.

You are given an integer array heights 
representing the current order that the 
students are standing in. Each heights[i] 
is the height of the ith student in line 
(0-indexed).

Return the number of indices where 
heights[i] != expected[i].
 ---------------------------------------------
 Pseudocode:

 return the sum of heights that don't equal for every height in the
 original array and sorted array

"Tricks" to Remember: can iterate through variables
in multiple lists if you zip them together into a tuple
Concepts:array, sorting, counting sort

==============================================

==============================================
 ---------------------------------------------
 Pseudocode:

"Tricks" to Remember: 
Concepts: