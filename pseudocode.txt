The purpose of this file is to store pseudocode versions
of the solutions of the problems that I have solved in order
to review them more quickly. Simply given the question name 
and description I should be able to come up with the pseudocode 
from memory which can then be translated into working code. 

==============================================
1. TWO SUM 
==============================================
Given an array of integers nums and an integer 
target, return indices of the two numbers such 
that they add up to target.You may assume that 
each input would have exactly one solution, 
and you may not use the same element twice.
You can return the answer in any order.
 ---------------------------------------------
Pseudocode:


initialize dict 
loop through nums
    if target - nums[i] in dict
       return indices
    else:
       add to dict


"Tricks" to Remember: one pass and lookups are O(1)
Concepts: array, hash table

==============================================
2. ADD TWO NUMBERS
==============================================
You are given two non-empty linked lists 
representing two non-negative integers. 
The digits are stored in reverse order, 
and each of their nodes contains a single 
digit. Add the two numbers and return the 
sum as a linked list.

You may assume the two numbers do not contain 
any leading zero, except the number 0 itself.

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 ---------------------------------------------
 Pseudocode:

 initialize result listNode
initialize current pointer

initialize carry
while l1 or l2 or carry
    val 1 if there is one, or 0
    val 2, if there is one, or 0

    calculate sum

    calculate carry
    calculate val (ones place)

    set next value for result listnode 

    update pointers
return dummy.next


"Tricks" to Remember: have to calculate carry
and dummy node 

Concepts: linked list, math, recursion

==============================================
5. LONGEST PALINDROMIC SUBSTRING
==============================================
Given a string s, return the longest 
palindromic
 
substring
 in s.

Input: s = "babad"
Output: "bab" or "aba"

Input: s = "cbbd"
Output: "bb"

 ---------------------------------------------
 Pseudocode:
initialize result string

initialize result length

loop through string
    # odd length string
    set left and right pointers equal to current index
    while l >= 0 and r < len(s) and string indices equal
        if length of subsection greater than current length 
            set new result for those indices
            set new longest length
        decrement left pointer
        increment right pointer

    # even length string 
    set left and right pointers to current index and next index
    while l >= 0 and r < len(s) and string indices equal
        if length of subsection greater than current length 
            set new result for those indices
            set new longest length
        decrement left pointer
        increment right pointer

return result 

"Tricks" to Remember: 
As you loop through the list, consider each index
the center. Separate cases for even and odd number 
string lengths

Concepts: two pointers, string, dynamic programming

==============================================
49. GROUP ANAGRAMS
==============================================
Given an array of strings strs, group the 
anagrams together. You can return the answer 
in any order.
An Anagram is a word or phrase formed by 
rearranging the letters of a different word 
or phrase, typically using all the original 
letters exactly once.
 ---------------------------------------------
Pseudocode:

initialize answer list
initialize dictionary for anagrams

loop through all words in argument
    if sorted current word not in dict
        add the sorted key and [word]
    else:
        append under that sorted key 

loop through all values of dict
    append to answer

return answer 


"Tricks" to Remember: Keys in python cannot be 
mutable, i.e. lists. Must convert to tuple first
**retrieving keys/values from dict 
Concepts: array, hash table, string, sorting

==============================================
75. Sort Colors
==============================================
 ---------------------------------------------
 Pseudocode:
initialize variables for zeroes, ones, and length of array

get the count for zeroes and ones by looping through array

assign the values in each range to 0, 1, and 2 using for lookups
(remember that python starts at 0)


"Tricks" to Remember: 
You know beforehand how big the array is,
and you know the order they have to be in.
You just have to get the count to know which indices
need to be which values

Concepts: Array, Two Pointers, Sorting

==============================================
76. MINIMUM WINDOW SUBSTRING
==============================================
 ---------------------------------------------
 Pseudocode:

 if target string is empty
    return empty string

initialize hashmaps of character counts for window and t 
set counts for t hashmap
initialize variables for count totals that you have in the window
and what you need len(countT)
initialize result and result length so you can minimize length
loop through all indices of string
    assign current character to value
    update window hashmap character count
    if it's a character that matters and count matches countT exactly
        update have

    while have equals need 
        if current length less than saved result length
            res is now new l, r pointers
            reslen is now r - l + 1
        window hashmap of leftmost character subtracted
        if letter you just popped was part of countT, decrease from total you have
        increase left pointer
assign indices of result array to l, r 
return the string of those indices if result length is not infinity otherwise return an empty string



    


"Tricks" to Remember: 
you can update and set values in a hashmap using
countT[c] = 1 + countT.get(c, 0) <-- default value of 0

result will be the indices of left and right pointers

Concepts:

==============================================
141. Linked List Cycle
==============================================
Given head, the head of a linked list, 
determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is 
some node in the list that can be reached again 
by continuously following the next pointer. 
Internally, pos is used to denote the index 
of the node that tail's next pointer is 
connected to. Note that pos is not passed 
as a parameter.

Return true if there is a cycle in the 
linked list. Otherwise, return false.

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the 
linked list, where the tail connects 
to the 1st node (0-indexed).
 ---------------------------------------------
 Pseudocode:

 Solution 1:
 initialize fast and slow pointers
 while fast and fast.next
    increment slow pointer
    increment fast pointer
    if they equal
        return True
return False

 Solution 2: 
intialize seen set
set the current pointer
while current
    if next is in seen
        return True
    add to seen
    increment pointer
return False

"Tricks" to Remember: 
Solution 1: slow pointer and fast pointer will
always meet if they reach a cycle. Fast pointer will
catch up to slow pointer. Time Complexity O(n) -
length of the input
Solution 2: Have to store the entire node
in a set because it will have the same memory location
and you can detect if you go to the same one. 
Concepts:hash table, linked list, two pointers

==============================================
209. MINIMUM SIZE SUBARRAY SUM
==============================================
Given an array of positive integers nums and a 
positive integer target, return the minimal 
length of a 
subarray
 whose sum is greater than or equal to target. 
 If there is no such subarray, return 0 instead.
 ---------------------------------------------
 Pseudocode:
initialize left pointer and total
intitialize res

loop through array with right pointer
    add index to total
    while total is >= target 
        res = min(r - l + 1, res)
        subtract left pointer from total
        increase left pointer

return 0 if res still original value, else res



"Tricks" to Remember: 
Need to initialize res to an arbitrarily large number so when 
you compare you keep the min 

Concepts:array, binary search, sliding window, prefix sum

==============================================
217. CONTAINS DUPLICATE
==============================================
Given an integer array nums, return true if 
any value appears at least twice in the array, 
and return false if every element is distinct.

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
 ---------------------------------------------
 Pseudocode:

 initialize hashmap of seen nums 

 loop through all nums 
    if num in seen
        return True
    else:
        add number to seen 
return False

"Tricks" to Remember: can exit with true to 
duplicate at any point looping through the 
nums when that number is 
already in the hashmap 
Concepts: array, hash table, sorting 

==============================================
219. CONTAINS DUPLICATE II
==============================================
Given an integer array nums and an integer k, 
return true if there are two distinct indices 
i and j in the array such that nums[i] == 
nums[j] and abs(i - j) <= k.
Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true
Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false
 ---------------------------------------------
 Pseudocode:

initialize hashmap

loop through all numbers
    if number not in hashmap 
        add to hashmap num: index 
    else:
        if the abs diff between index and hm index <=K
            return True
        add to hashmap num: index
return False

"Tricks" to Remember: Don't have to store list of 
indices
for each number, because the difference will 
always be >k as you go to the right. Only need
to compare one previous to current 
Concepts: array, hash table, sliding window
==============================================
239. SLIDING WINDOW MAXIMUM
==============================================

You are given an array of integers nums, 
there is a sliding window of size k which 
is moving from the very left of the array 
to the very right. You can only see the k 
numbers in the window. Each time the sliding 
window moves right by one position.

Return the max sliding window.
 ---------------------------------------------
 Pseudocode:
initialize output array
initialize a double-sided queue
initialize left and right pointers

while right pointer doesn't go past end of array:
    while the queue exists and rightmost value in queue is less than current number r:
        remove them from the queue
    add new value r to queue

    if left value is greater than first value of queue:
        remove leftmost from queue

    # make sure window is at least size K
    if right plus one is at least size k:
        append to output the maximum number of queue (leftmost)
        increment left pointer
    
    increment right pointer
return output

"Tricks" to Remember: 
can use deque to access both beginning and end of queue 
Concepts: array, queue, sliding window, heap (priority queue),
monotonic queue
==============================================
242. VALID ANAGRAM
==============================================
Given two strings s and t, return true if t 
is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by 
rearranging the letters of a different word 
or phrase, typically using all the original 
letters exactly once.

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false
 ---------------------------------------------
 Pseudocode:

can check if lengths of both strings are equal

create dictionaries for counts of letters of each string

loop through strings adding counts

for each key in one dictionary, check that the count is equal in both
    if not, return False

return True


"Tricks" to Remember: in operator is O(1) 
for dictionaries
and sets in python
Concepts:hash table, string, sorting

==============================================
347. TOP K FREQUENT ELEMENTS
==============================================
Given an integer array nums and an integer k, 
return the k most frequent elements. You may 
return the answer in any order.
 ---------------------------------------------
 Pseudocode:

 initialize dict of count
 initialize array of arrays of length nums 

for num in nums 
    set count dict value 

for num, count in count.items 
    add num to frequency array 

initialize result
for i in length of frequency, iterate backwards
    for n in frequency 
        append to result
        if result == K
            return result

"Tricks" to Remember: Bucket sort using count as index
and arrays with the number as values. Max size of bucket sort
array is the length of the array - O(n)
Concepts:array, hash table, divide and conquer, 
sorting, heap (priority queue), bucket sort, counting, 
quickselect

==============================================
523. CONTINUOUS SUBARRAY SUM 
==============================================
Given an integer array nums and an integer k, 
return true if nums has a good subarray or 
false otherwise. A good subarray is a subarray 
where: its length is at least two, and the sum 
of the elements of the subarray is a multiple 
of k.
Note that:
A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists 
an integer n such that x = n * k. 0 is always 
a multiple of k.
 ---------------------------------------------
Pseudocode:

initialize dict 
initialize total

loop through with index and number 
    increment total 
    calculate remainder
    if calculated remainder not already in dict 
        add remainder to dict [r: index]

    else if index at least 2 (and already in dict)
        return True
    
return False 



"Tricks" to Remember: initialize hash table with 
0: -1
to handle cases where subarray starting from index 
0 is divisible by
 k
WHY does it matter/what does it mean if there is 
repeat of the same remainder?
Remainder is what is left after not dividing evenly 
into a number. 
So if you get the same remainder after adding 
more numbers to the subarray, a portion of the 
subarray has been divided
evenly into the number (k)
k = 6
[23, 2, 4] -> [23, 25, 29] 23 % 6 = 5 and 29 % 6 = 5
(2+4 = 6 which divides into 6 evenly)

Concepts: array, hash table, math, prefix sum
==============================================
704. BINARY SEARCH
==============================================
Given an array of integers nums which is sorted 
in ascending order, and an integer target, write 
a function to search target in nums. If target 
exists, then return its index. Otherwise, 
return -1.

You must write an algorithm with O(log n) runtime 
complexity.
Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
 ---------------------------------------------
 Pseudocode:

initialize left and right pointers
while left doesn't equal right pointer
    calculate new midpoint
    if midpoint > target
        set new right pointer
    if midpoint < target 
        set new left pointer
    else
        return midpoint
return -1 # default 


"Tricks" to Remember: 
If m does not equal target, when resetting new left and right pointers
you don't set equal to m exactly

Concepts: array, binary search

==============================================
875. KOKO EATING BANANAS
==============================================
Koko loves to eat bananas. There are n piles of bananas, 
the ith pile has piles[i] bananas. The guards have gone 
and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. 
Each hour, she chooses some pile of bananas and eats k 
bananas from that pile. If the pile has less than k bananas, 
she eats all of them instead and will not eat any more bananas 
during this hour.

Koko likes to eat slowly but still wants to finish eating all 
the bananas before the guards return.

Return the minimum integer k such that she can eat all the 
bananas within h hours.

 ---------------------------------------------
 Pseudocode:

 initialize left and right pointers 

 while left pointer <= right
    get mid pointer
    intialize total time with that k 
    for each pile
        calculate total time 
    if time <= max hours given
        update right pointer 
    else # needed more time, search right 
        update left pointer 
return left pointer # will have minimum k 

"Tricks" to Remember: 
left pointer will always trend toward the lowest amount of bananas
that allows you to eat all in h hours

max amount of bananas necessary to eat in h hours is max of all the piles


Concepts: array, binary search

==============================================
945. MINIMUM INCREMENT TO MAKE ARRAY UNIQUE
==============================================
 ---------------------------------------------
 Pseudocode:

 initialize total
 sort array
 
 loop through nums, starting at 2nd num 
 if number less than or equal to previous then 
    calculate new value
    calculate new total
    set new value at index

return total

"Tricks" to Remember: To find the "gap" to fill in, 
sort, check current against previous and set next to one
more than previous
Concepts:array, greedy, sorting, counting 

==============================================
1051. HEIGHT CHECKER
==============================================
A school is trying to take an annual photo of 
all the students. The students are asked to 
stand in a single file line in non-decreasing 
order by height. Let this ordering be 
represented by the integer array expected 
where expected[i] is the expected height of 
the ith student in line.

You are given an integer array heights 
representing the current order that the 
students are standing in. Each heights[i] 
is the height of the ith student in line 
(0-indexed).

Return the number of indices where 
heights[i] != expected[i].
 ---------------------------------------------
 Pseudocode:

 return the sum of heights that don't equal for every height in the
 original array and sorted array

"Tricks" to Remember: can iterate through variables
in multiple lists if you zip them together into a tuple
Concepts:array, sorting, counting sort

==============================================
1343. NUMBER OF SUB-ARRAYS OF SIZE K 
AND AVERAGE GREATER THAN OR EQUAL TO 
THRESHOLD
==============================================
 ---------------------------------------------
 Pseudocode:
initialize count
calculate current sum of size k 
loop through array length of array less size of k 
    calculate new current sum by adding new number to right 
    if cursum divided by k >= threshold 
        increase count 
    subtract leftmost index from current sum
return count

"Tricks" to Remember: 
will slide over subtracting leftmost index value
currSum += arr[l + k - 1] # adds next index to right
# l as starting point, add in length of subarray, 
subtract 1 because indices are 0-indexed in python

Concepts:
array, sliding window



==============================================

==============================================
 ---------------------------------------------
 Pseudocode:

"Tricks" to Remember: 
Concepts: