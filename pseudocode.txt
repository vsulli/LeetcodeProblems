The purpose of this file is to store pseudocode versions
of the solutions of the problems that I have solved in order
to review them more quickly. Simply given the question name 
and description I should be able to come up with the pseudocode 
from memory which can then be translated into working code. 

==============================================
1. TWO SUM 
==============================================
Given an array of integers nums and an integer 
target, return indices of the two numbers such 
that they add up to target.You may assume that 
each input would have exactly one solution, 
and you may not use the same element twice.
You can return the answer in any order.
 ---------------------------------------------
Pseudocode:


initialize dict 
loop through nums
    if target - nums[i] in dict
       return indices
    else:
       add to dict


"Tricks" to Remember: one pass and lookups are O(1)
Concepts: array, hash table

==============================================
2. ADD TWO NUMBERS
==============================================
You are given two non-empty linked lists 
representing two non-negative integers. 
The digits are stored in reverse order, 
and each of their nodes contains a single 
digit. Add the two numbers and return the 
sum as a linked list.

You may assume the two numbers do not contain 
any leading zero, except the number 0 itself.

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 ---------------------------------------------
 Pseudocode:

 initialize result listNode
initialize current pointer

initialize carry
while l1 or l2 or carry
    val 1 if there is one, or 0
    val 2, if there is one, or 0

    calculate sum

    calculate carry
    calculate val (ones place)

    set next value for result listnode 

    update pointers
return dummy.next


"Tricks" to Remember: have to calculate carry
and dummy node 

Concepts: linked list, math, recursion

==============================================
49. GROUP ANAGRAMS
==============================================
Given an array of strings strs, group the 
anagrams together. You can return the answer 
in any order.
An Anagram is a word or phrase formed by 
rearranging the letters of a different word 
or phrase, typically using all the original 
letters exactly once.
 ---------------------------------------------
Pseudocode:

initialize answer list
initialize dictionary for anagrams

loop through all words in argument
    if sorted current word not in dict
        add the sorted key and [word]
    else:
        append under that sorted key 

loop through all values of dict
    append to answer

return answer 


"Tricks" to Remember: Keys in python cannot be 
mutable, i.e. lists. Must convert to tuple first
**retrieving keys/values from dict 
Concepts: array, hash table, string, sorting

==============================================
75. Sort Colors
==============================================
 ---------------------------------------------
 Pseudocode:
initialize variables for zeroes, ones, and length of array

get the count for zeroes and ones by looping through array

assign the values in each range to 0, 1, and 2 using for lookups
(remember that python starts at 0)


"Tricks" to Remember: 
You know beforehand how big the array is,
and you know the order they have to be in.
You just have to get the count to know which indices
need to be which values

Concepts: Array, Two Pointers, Sorting

==============================================
141. Linked List Cycle
==============================================
Given head, the head of a linked list, 
determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is 
some node in the list that can be reached again 
by continuously following the next pointer. 
Internally, pos is used to denote the index 
of the node that tail's next pointer is 
connected to. Note that pos is not passed 
as a parameter.

Return true if there is a cycle in the 
linked list. Otherwise, return false.

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the 
linked list, where the tail connects 
to the 1st node (0-indexed).
 ---------------------------------------------
 Pseudocode:

 Solution 1:
 initialize fast and slow pointers
 while fast and fast.next
    increment slow pointer
    increment fast pointer
    if they equal
        return True
return False

 Solution 2: 
intialize seen set
set the current pointer
while current
    if next is in seen
        return True
    add to seen
    increment pointer
return False

"Tricks" to Remember: 
Solution 1: slow pointer and fast pointer will
always meet if they reach a cycle. Fast pointer will
catch up to slow pointer. Time Complexity O(n) -
length of the input
Solution 2: Have to store the entire node
in a set because it will have the same memory location
and you can detect if you go to the same one. 
Concepts:hash table, linked list, two pointers

==============================================
217. CONTAINS DUPLICATE
==============================================
Given an integer array nums, return true if 
any value appears at least twice in the array, 
and return false if every element is distinct.

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
 ---------------------------------------------
 Pseudocode:

 initialize hashmap of seen nums 

 loop through all nums 
    if num in seen
        return True
    else:
        add number to seen 
return False

"Tricks" to Remember: can exit with true to 
duplicate at any point looping through the 
nums when that number is 
already in the hashmap 
Concepts: array, hash table, sorting 

==============================================
219. CONTAINS DUPLICATE II
==============================================
Given an integer array nums and an integer k, 
return true if there are two distinct indices 
i and j in the array such that nums[i] == 
nums[j] and abs(i - j) <= k.
Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true
Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false
 ---------------------------------------------
 Pseudocode:

initialize hashmap

loop through all numbers
    if number not in hashmap 
        add to hashmap num: index 
    else:
        if the abs diff between index and hm index <=K
            return True
        add to hashmap num: index
return False

"Tricks" to Remember: Don't have to store list of 
indices
for each number, because the difference will 
always be >k as you go to the right. Only need
to compare one previous to current 
Concepts: array, hash table, sliding window

==============================================
242. VALID ANAGRAM
==============================================
Given two strings s and t, return true if t 
is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by 
rearranging the letters of a different word 
or phrase, typically using all the original 
letters exactly once.

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false
 ---------------------------------------------
 Pseudocode:

can check if lengths of both strings are equal

create dictionaries for counts of letters of each string

loop through strings adding counts

for each key in one dictionary, check that the count is equal in both
    if not, return False

return True


"Tricks" to Remember: in operator is O(1) 
for dictionaries
and sets in python
Concepts:hash table, string, sorting

==============================================
347. TOP K FREQUENT ELEMENTS
==============================================
Given an integer array nums and an integer k, 
return the k most frequent elements. You may 
return the answer in any order.
 ---------------------------------------------
 Pseudocode:

 initialize dict of count
 initialize array of arrays of length nums 

for num in nums 
    set count dict value 

for num, count in count.items 
    add num to frequency array 

initialize result
for i in length of frequency, iterate backwards
    for n in frequency 
        append to result
        if result == K
            return result

"Tricks" to Remember: Bucket sort using count as index
and arrays with the number as values. Max size of bucket sort
array is the length of the array - O(n)
Concepts:array, hash table, divide and conquer, 
sorting, heap (priority queue), bucket sort, counting, 
quickselect

==============================================
523. CONTINUOUS SUBARRAY SUM 
==============================================
Given an integer array nums and an integer k, 
return true if nums has a good subarray or 
false otherwise. A good subarray is a subarray 
where: its length is at least two, and the sum 
of the elements of the subarray is a multiple 
of k.
Note that:
A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists 
an integer n such that x = n * k. 0 is always 
a multiple of k.
 ---------------------------------------------
Pseudocode:

initialize dict 
initialize total

loop through with index and number 
    increment total 
    calculate remainder
    if calculated remainder not already in dict 
        add remainder to dict [r: index]

    else if index at least 2 (and already in dict)
        return True
    
return False 



"Tricks" to Remember: initialize hash table with 
0: -1
to handle cases where subarray starting from index 
0 is divisible by
 k
WHY does it matter/what does it mean if there is 
repeat of the same remainder?
Remainder is what is left after not dividing evenly 
into a number. 
So if you get the same remainder after adding 
more numbers to the subarray, a portion of the 
subarray has been divided
evenly into the number (k)
k = 6
[23, 2, 4] -> [23, 25, 29] 23 % 6 = 5 and 29 % 6 = 5
(2+4 = 6 which divides into 6 evenly)

Concepts: array, hash table, math, prefix sum

==============================================
945. MINIMUM INCREMENT TO MAKE ARRAY UNIQUE
==============================================
 ---------------------------------------------
 Pseudocode:

 initialize total
 sort array
 
 loop through nums, starting at 2nd num 
 if number less than or equal to previous then 
    calculate new value
    calculate new total
    set new value at index

return total

"Tricks" to Remember: To find the "gap" to fill in, 
sort, check current against previous and set next to one
more than previous
Concepts:array, greedy, sorting, counting 

==============================================
1051. HEIGHT CHECKER
==============================================
A school is trying to take an annual photo of 
all the students. The students are asked to 
stand in a single file line in non-decreasing 
order by height. Let this ordering be 
represented by the integer array expected 
where expected[i] is the expected height of 
the ith student in line.

You are given an integer array heights 
representing the current order that the 
students are standing in. Each heights[i] 
is the height of the ith student in line 
(0-indexed).

Return the number of indices where 
heights[i] != expected[i].
 ---------------------------------------------
 Pseudocode:

 return the sum of heights that don't equal for every height in the
 original array and sorted array

"Tricks" to Remember: can iterate through variables
in multiple lists if you zip them together into a tuple
Concepts:array, sorting, counting sort

==============================================

==============================================
 ---------------------------------------------
 Pseudocode:

"Tricks" to Remember: 
Concepts: